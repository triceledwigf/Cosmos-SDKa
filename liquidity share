package liquidity

import (
	"fmt"

	sdk "github.com/cosmos/cosmos-sdk/types"
)

// LiquidityPool represents a liquidity pool
type LiquidityPool struct {
	ID          uint64         `json:"id"`
	ReserveA     sdk.Coin       `json:"reserve_a"`
	ReserveB     sdk.Coin       `json:"reserve_b"`
	Liquidity    sdk.Coin       `json:"liquidity"`
	TotalShares  sdk.Dec        `json:"total_shares"`
}

// MsgAddLiquidity defines the AddLiquidity message
type MsgAddLiquidity struct {
	Sender    sdk.AccAddress `json:"sender"`
	PoolID    uint64         `json:"pool_id"`
	AssetA    sdk.Coin       `json:"asset_a"`
	AssetB    sdk.Coin       `json:"asset_b"`
	MinShares sdk.Dec        `json:"min_shares"`
}

// HandleMsgAddLiquidity handles the AddLiquidity message
func HandleMsgAddLiquidity(ctx sdk.Context, k Keeper, msg MsgAddLiquidity) sdk.Result {
	pool, found := k.GetLiquidityPool(ctx, msg.PoolID)
	if !found {
		return sdk.ErrUnknownRequest(fmt.Sprintf("liquidity pool with ID %d not found", msg.PoolID)).Result()
	}

	// Calculate liquidity shares
	liquidityShares := calculateLiquidityShares(msg.AssetA, pool.ReserveA, pool.TotalShares)

	// Verify minimum shares requirement
	if liquidityShares.LessThan(msg.MinShares) {
		return sdk.ErrInsufficientCoins("insufficient liquidity shares").Result()
	}

	// Calculate and deduct fees
	fee := calculateFees(liquidityShares, k.GetFeePercentage(ctx))
	adjustedLiquidityShares := liquidityShares.Sub(fee)

	// Update pool and user balances
	pool.ReserveA = pool.ReserveA.Add(msg.AssetA)
	pool.ReserveB = pool.ReserveB.Add(msg.AssetB)
	pool.TotalShares = pool.TotalShares.Add(adjustedLiquidityShares)

	// Mint liquidity tokens to the user
	err := k.MintLiquidityTokens(ctx, msg.Sender, adjustedLiquidityShares)
	if err != nil {
		return err.Result()
	}

	// Emit an event
	ctx.EventManager().EmitEvent(
		sdk.NewEvent(
			sdk.EventTypeMessage,
			sdk.NewAttribute(sdk.AttributeKeyModule, sdk.AttributeValueCategory),
		),
	)

	// Update the liquidity pool
	k.SetLiquidityPool(ctx, pool)

	return sdk.Result{Code: sdk.CodeOK, Events: ctx.EventManager().ABCIEvents()}
}

// Helper function to calculate liquidity shares
func calculateLiquidityShares(asset sdk.Coin, reserve sdk.Coin, totalShares sdk.Dec) sdk.Dec {
	return asset.Amount.ToDec().Mul(totalShares).Quo(reserve.Amount.ToDec())
}

// Helper function to calculate fees
func calculateFees(liquidityShares sdk.Dec, feePercentage sdk.Dec) sdk.Dec {
	return liquidityShares.Mul(feePercentage).Quo(sdk.NewDec(100))
}
